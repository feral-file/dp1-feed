#!/usr/bin/env node

/**
 * Initialize KV storage with sample DP-1 data
 * Usage: node scripts/init-kv-data.js [--env staging|production]
 */

import { execSync } from 'child_process';
import { readFileSync, writeFileSync, unlinkSync } from 'fs';
import { join, dirname } from 'path';
import { fileURLToPath } from 'url';
import { tmpdir } from 'os';

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

// Parse command line arguments
const args = process.argv.slice(2);
const envFlag = args.find(arg => arg.startsWith('--env'));
const environment = envFlag
  ? envFlag.split('=')[1] || args[args.indexOf(envFlag) + 1]
  : 'development';

console.log(`üöÄ Initializing KV data for environment: ${environment}`);

// Helper function to run wrangler commands
function runWranglerCommand(command) {
  try {
    const envSuffix = environment !== 'development' ? ` --env ${environment}` : '';
    const fullCommand = `npx wrangler ${command}${envSuffix}`;
    console.log(`Running: ${fullCommand}`);
    execSync(fullCommand, { stdio: 'inherit' });
    return true;
  } catch (error) {
    console.error(`‚ùå Error running command: ${error.message}`);
    return false;
  }
}

// Helper function to safely escape JSON for shell
function escapeJsonForShell(jsonString) {
  // For cross-platform compatibility, write to a temporary file
  const tempFile = join(tmpdir(), `kv-data-${Date.now()}.json`);
  writeFileSync(tempFile, jsonString);
  return tempFile;
}

// Helper function to put KV data using wrangler v4 syntax
function putKVData(binding, key, data) {
  let tempFile;
  try {
    const jsonString = JSON.stringify(data, null, 2);
    tempFile = escapeJsonForShell(jsonString);

    const envSuffix = environment !== 'development' ? ` --env ${environment}` : '';
    const previewFlag = environment === 'development' ? ' --preview' : ' --preview false';
    const command = `npx wrangler kv key put "${key}" --path "${tempFile}" --binding ${binding}${envSuffix}${previewFlag}`;

    console.log(`Storing ${key} in ${binding}...`);
    execSync(command, { stdio: 'inherit' });

    // Clean up temp file
    unlinkSync(tempFile);
    return true;
  } catch (error) {
    console.error(`‚ùå Error storing ${key}:`, error.message);
    // Clean up temp file if it exists
    if (tempFile) {
      try {
        unlinkSync(tempFile);
      } catch (e) {
        // Ignore cleanup errors
      }
    }
    return false;
  }
}

// Sample playlist data
const samplePlaylist1 = {
  dpVersion: '1.0.0',
  id: 'generative-art-showcase',
  created: new Date().toISOString(),
  defaults: {
    display: {
      scaling: 'fit',
      background: '#000000',
      margin: '2%',
      autoplay: true,
      loop: true,
    },
    license: 'token',
    duration: 300,
  },
  items: [
    {
      id: 'refik-anadol-machine-hallucinations',
      title: 'Machine Hallucinations',
      source: 'https://cdn.feralfile.com/refik-anadol/machine-hallucinations/index.html',
      duration: 300,
      license: 'token',
      display: {
        scaling: 'fill',
        background: '#000000',
      },
      provenance: {
        type: 'onChain',
        contract: {
          chain: 'evm',
          standard: 'erc721',
          address: '0x61d45475fe81ef46bdd8093b5c73efee03167e0f',
          seriesId: 1,
          uri: 'ipfs://bafybeigdyrzt5sfp7udm7hu76uh7y26nf3efuylqabf3oclgtqy55fbzdi',
        },
      },
    },
    {
      id: 'yoko-ono-sky-tv',
      title: 'Sky TV',
      source: 'https://cdn.feralfile.com/yoko-ono/sky-tv/index.html',
      duration: 180,
      license: 'open',
      display: {
        scaling: 'fit',
        background: 'transparent',
      },
      provenance: {
        type: 'seriesRegistry',
        contract: {
          chain: 'evm',
          standard: 'erc721',
          seriesId: 42,
        },
      },
    },
  ],
  signature: 'ed25519:0x...', // Will be generated by the server
};

const samplePlaylist2 = {
  dpVersion: '1.0.0',
  id: 'abstract-expressions',
  created: new Date().toISOString(),
  defaults: {
    display: {
      scaling: 'fit',
      background: '#ffffff',
      margin: '5%',
    },
    license: 'open',
    duration: 240,
  },
  items: [
    {
      id: 'lu-yang-delusional-mandala',
      title: 'Delusional Mandala',
      source: 'https://cdn.feralfile.com/lu-yang/delusional-mandala/index.html',
      duration: 240,
      license: 'token',
      display: {
        scaling: 'fit',
        background: '#ff0066',
        margin: '5%',
      },
      provenance: {
        type: 'onChain',
        contract: {
          chain: 'tezos',
          standard: 'fa2',
          address: 'KT1Hkg5qeNhfwpKW4fXvq7HGZB9z2EnmCCA9',
          tokenId: '123',
          uri: 'ipfs://bafybeicmwon6lgguhc6vcxh5zg7jqsznqvqe26xigz7qx24jrbdwpbz3nq',
        },
      },
    },
    {
      id: 'shunsuke-takawo-particles',
      title: 'Particles',
      source: 'https://cdn.feralfile.com/shunsuke-takawo/particles/index.html',
      duration: 360,
      license: 'subscription',
      display: {
        scaling: 'stretch',
        background: '#000000',
        autoplay: false,
      },
      provenance: {
        type: 'offChainURI',
        uri: 'https://certificates.feralfile.com/shunsuke-takawo-particles.pdf',
      },
    },
  ],
  signature: 'ed25519:0x...', // Will be generated by the server
};

// Sample playlist groups
const samplePlaylistGroup1 = {
  id: 'winter-exhibition-2025',
  title: 'Winter Digital Art Exhibition 2025',
  curator: 'Feral File',
  summary:
    'A curated exhibition featuring groundbreaking generative and blockchain-native digital artworks from leading contemporary artists exploring the intersection of technology, art, and human creativity.',
  playlists: [
    `${process.env.BASE_URL || 'https://api.feed.feralfile.com'}/playlists/generative-art-showcase`,
    `${process.env.BASE_URL || 'https://api.feed.feralfile.com'}/playlists/abstract-expressions`,
  ],
  created: new Date().toISOString(),
  coverImage: 'ipfs://bafybeigdyrzt5sfp7udm7hu76uh7y26nf3efuylqabf3oclgtqy55fbzdi/cover.jpg',
};

const samplePlaylistGroup2 = {
  id: 'emerging-artists-collection',
  title: 'Emerging Artists Collection',
  curator: 'Digital Art Collective',
  summary: 'Spotlight on emerging digital artists pushing the boundaries of blockchain-native art.',
  playlists: [
    `${process.env.BASE_URL || 'https://api.feed.feralfile.com'}/playlists/abstract-expressions`,
  ],
  created: new Date().toISOString(),
  coverImage: 'ipfs://bafybeicmwon6lgguhc6vcxh5zg7jqsznqvqe26xigz7qx24jrbdwpbz3nq/cover.jpg',
};

// Main initialization function
async function initializeData() {
  console.log('üìù Creating sample playlists...');

  // Create individual playlists
  const success1 = putKVData('DP1_PLAYLISTS', `playlist:${samplePlaylist1.id}`, samplePlaylist1);

  if (!success1) {
    console.error('‚ùå Failed to create sample playlist 1');
    process.exit(1);
  }

  const success2 = putKVData('DP1_PLAYLISTS', `playlist:${samplePlaylist2.id}`, samplePlaylist2);

  if (!success2) {
    console.error('‚ùå Failed to create sample playlist 2');
    process.exit(1);
  }

  console.log('üìù Creating sample playlist groups...');

  // Create individual playlist groups
  const success3 = putKVData(
    'DP1_PLAYLIST_GROUPS',
    `playlist-group:${samplePlaylistGroup1.id}`,
    samplePlaylistGroup1
  );

  if (!success3) {
    console.error('‚ùå Failed to create sample playlist group 1');
    process.exit(1);
  }

  const success4 = putKVData(
    'DP1_PLAYLIST_GROUPS',
    `playlist-group:${samplePlaylistGroup2.id}`,
    samplePlaylistGroup2
  );

  if (!success4) {
    console.error('‚ùå Failed to create sample playlist group 2');
    process.exit(1);
  }

  console.log('‚úÖ KV data initialization completed successfully!');
  console.log('\nüìã Summary:');
  console.log(`   ‚Ä¢ Sample playlist 1: playlist:${samplePlaylist1.id}`);
  console.log(`   ‚Ä¢ Sample playlist 2: playlist:${samplePlaylist2.id}`);
  console.log(`   ‚Ä¢ Sample playlist group 1: playlist-group:${samplePlaylistGroup1.id}`);
  console.log(`   ‚Ä¢ Sample playlist group 2: playlist-group:${samplePlaylistGroup2.id}`);
  console.log('\nüöÄ Your DP-1 Feed Operator API is ready to use!');
  console.log('\nüì° Test endpoints:');
  console.log(`   GET  /playlists                              # List all playlists`);
  console.log(`   GET  /playlists/${samplePlaylist1.id}        # Get specific playlist`);
  console.log(`   GET  /playlist-groups                        # List all playlist groups`);
  console.log(`   GET  /playlist-groups/${samplePlaylistGroup1.id}  # Get specific group`);
  console.log(`   POST /playlists (requires API key)          # Create new playlist`);
  console.log(`   POST /playlist-groups (requires API key)    # Create new group`);
}

// Run initialization
initializeData().catch(error => {
  console.error('‚ùå Initialization failed:', error);
  process.exit(1);
});
